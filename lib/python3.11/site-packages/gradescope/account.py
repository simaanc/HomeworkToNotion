
import requests
from bs4 import BeautifulSoup
from .course import GSCourse
from typing import List, Set, Dict, Tuple, Optional

from datetime import datetime

# Define the current date
current_date = datetime.now()

class GSAccount:
    """A class used to govern Gradescope accounts.
    Attributes
    ----------
    session : requests.Session
        the requests library Session object to manage authentication
    courses : dict(str : GSCourse)
        dictionary using course ID as key and GSCourse as value
    Methods
    -------
    add_courses_in_account()
        adds all courses available in user account
    add_course()
    """

    def __init__(self, session: requests.Session):
        self.session = session
        self.courses: Dict[str, GSCourse] = {}
        
    def add_courses_in_account(self, is_instructor: bool = False) -> None:
        account_resp = self.session.get("https://www.gradescope.com/account")
        account_resp_parsed = BeautifulSoup(account_resp.text, "html.parser")
        
        # Assuming courses are directly under divs with a specific class based on term or other criteria
        courses_containers = account_resp_parsed.find_all("div", class_="courseList--coursesForTerm")
        for container in courses_containers:
            for course in container.find_all("a", class_="courseBox"):
                name_element = course.find("div", class_="courseBox--name")
                if name_element:
                    name = name_element.text.strip()
                    short_name = course.find("h3", class_="courseBox--shortname").text.strip()
                    cid = course['href'].split('/')[-1]
                    self.add_course(cid=cid, name=name, short_name=short_name, year=None)  # Adjust 'year' handling as needed
                else:
                    print("Course name element not found. Skipping this course.")

    def add_course(self, cid: str, name: str, short_name: str, year: str) -> None:
        """Creates a GSCourse object and adds it to the courses dictionary.
        Parameters
        ----------
        cid : str
            8-digit course ID
        name : str
            full name of the course
        shortname : str
            shortname of the course
        year : str
            year of the course
        """

        self.courses[cid] = GSCourse(
            cid=cid, name=name, short_name=short_name, year=year, session=self.session
        )